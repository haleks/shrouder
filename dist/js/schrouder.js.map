{"version":3,"sources":["shrouder.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"schrouder.js","sourcesContent":["// Haleks â€” Shrouder\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n +function ($) {\n    'use strict';\n\n    // Shrouder\n    // --------\n    // - Shroud your email via the elements data attributes.\n    // - @param string element\n    // - @param object options\n    function Shrouder(element, options) {\n        this.element = element\n        this.$element = $(element)\n        this.class = $(element).attr('class')\n        this.options = options\n\n        this.create()\n        this.refresh()\n    }\n\n   Shrouder.VERSION = '0.1.0'\n\n   // Create\n   // ------\n   // - Create an schrouded email string.\n   // - @param void\n   Shrouder.prototype.create = function () {\n       var user = this.options.user\n       var domain = this.options.domain\n\n       this.shrouder = user + '@' + domain\n       this.options.text = (typeof this.options.text === 'undefined') ? this.shrouder : this.options.text;\n   }\n\n   // Refresh\n   // -------\n   // - Refresh DOM with newly created element.\n   // - @param void\n   Shrouder.prototype.refresh = function () {\n       var mailto = '<a href=\"mailto:' + this.shrouder + '\" class=\"' + this.class + '\" itemprop=\"shrouder\">' + this.options.text + '</a>'\n\n       this.$element.after(mailto)\n       this.element.remove()\n   }\n\n   // Plugin\n   // ------\n   // - Create the shrouder plugin.\n   // - @param object option\n   function Plugin(option) {\n        return this.each(function () {\n            var $this = $(this)\n            var data = $this.data('haleks.shrouder')\n            var options = typeof option == 'object' && option\n\n            if (!data) $this.data('haleks.shrouder', (data = new Shrouder(this, options)))\n            if (typeof option == 'string') data[option]()\n        })\n    }\n\n    var old = $.fn.shrouder\n\n    $.fn.shrouder = Plugin\n    $.fn.shrouder.Constructor = Shrouder\n\n    // No Conflict\n    // -----------\n    // - Prevent plugin conflicts.\n    // - @param void\n    $.fn.shrouder.noConflict = function () {\n        $.fn.shrouder = old\n        return this\n    }\n\n    // Data API\n    // --------\n    // - Initialize plugin via data attributes.\n    // - @param void\n    $(window).on('load.shrouder.data-api', function () {\n        $('[data-toggle=\"shrouder\"]').each(function () {\n            var $shrouder = $(this)\n            Plugin.call($shrouder, $shrouder.data())\n        })\n    })\n\n }(jQuery);\n"],"sourceRoot":"/source/"}